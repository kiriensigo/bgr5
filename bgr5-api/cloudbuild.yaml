steps:
  # ビルド前にキャッシュを最適化するため、gcloud CLIを使用してCloud Storageからキャッシュを復元
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gsutil -m cp -r gs://$PROJECT_ID-cache/bgr5-api/bundler-cache /tmp/bundler-cache || echo "Cache not found. Continuing..."
        ls -la /tmp/bundler-cache || echo "Cache directory not found, will be created"

  # キャッシュ層の生成（依存関係のキャッシュを効率化するため）
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "--target"
      - "gems"
      - "-t"
      - "gcr.io/$PROJECT_ID/bgr5-api-gems:latest"
      - "--cache-from"
      - "gcr.io/$PROJECT_ID/bgr5-api-gems:latest"
      - "."

  # Dockerコンテナのビルド
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/bgr5-api:latest"
      - "--cache-from"
      - "gcr.io/$PROJECT_ID/bgr5-api-gems:latest"
      - "--cache-from"
      - "gcr.io/$PROJECT_ID/bgr5-api:latest"
      - "."

  # GCRへのイメージのプッシュ
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/bgr5-api:latest"

  # ビルド後にキャッシュを保存
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        mkdir -p /tmp/bundler-cache
        docker save gcr.io/$PROJECT_ID/bgr5-api-gems:latest | tar -xOf - | tar -C /tmp/bundler-cache -xf -
        gsutil -m cp -r /tmp/bundler-cache gs://$PROJECT_ID-cache/bgr5-api/

  # Cloud Runへのデプロイ
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "bgr5-api"
      - "--image"
      - "gcr.io/$PROJECT_ID/bgr5-api:latest"
      - "--region"
      - "asia-northeast1"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "8080"
      - "--memory"
      - "1Gi"
      - "--cpu"
      - "1"
      - "--min-instances"
      - "0"
      - "--max-instances"
      - "2"
      - "--timeout"
      - "300s"
      - "--set-env-vars"
      - "RAILS_ENV=production,RAILS_LOG_TO_STDOUT=true,RAILS_SERVE_STATIC_FILES=true,DATABASE_URL=postgres://postgres:postgres@35.200.15.8:5432/bgr5_production,DATABASE_HOST=35.200.15.8,DATABASE_PORT=5432,POSTGRES_USER=postgres,POSTGRES_PASSWORD=postgres,DATABASE_NAME=bgr5_production,DB_SKIP_WAIT=false,DEBUG=true,CORS_ORIGINS=https://bgr5-front-y2i5irl3rq-an.a.run.app,MALLOC_ARENA_MAX=2,WEB_CONCURRENCY=2,RAILS_MAX_THREADS=10"
      - "--set-cloudsql-instances"
      - "bgr4-project:asia-northeast1:bgr5-db"
      - "--execution-environment"
      - "gen2"
      - "--vpc-connector"
      - "bgr5-vpc-connector"
      - "--service-account"
      - "349403738734-compute@developer.gserviceaccount.com"
      - "--cpu-boost"
      - "--add-cloudsql-instances"
      - "bgr4-project:asia-northeast1:bgr5-db"
      - "--start-revision-with-tag"
      - "latest"
      - "--container-command"
      - "/rails/bin/docker-entrypoint"
      - "--container-arg"
      - "bundle"
      - "--container-arg"
      - "exec"
      - "--container-arg"
      - "puma"
      - "--container-arg"
      - "-C"
      - "--container-arg"
      - "config/puma.rb"
      - "--container-health-checks"
      - "health-check=http://:8080/health,initial-delay=120s,timeout=5s,period=30s,failure-threshold=3,warning-threshold=3,no-traffic-timeout=120s"

images:
  - "gcr.io/$PROJECT_ID/bgr5-api-gems:latest"
  - "gcr.io/$PROJECT_ID/bgr5-api:latest"

options:
  machineType: "E2_HIGHCPU_8"
  diskSizeGb: "100"
  dynamic_substitutions: true

timeout: "1800s"
